<?php

declare(strict_types=1);

namespace App\Tests\Controller;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class UnicornControllerTest extends WebTestCase
{
    public function testGetUnicorns(): void
    {
        $client = static::createClient();
        $client->request('GET', '/api/unicorns');
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        $this->assertResponseIsSuccessful();
    }

    public function testPostUnicorns(): void
    {
        $client = static::createClient();

        $data = [
            'content' => 'Content of a new unicorn',
            'name'    => 'Unique unicorn',
            'price'   =>  1500
        ];

        $client->request('POST',
            '/api/unicorns',
            array(),
            array(),
            array('CONTENT_TYPE' => 'application/json'),
            json_encode($data)
        );
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        $this->assertResponseIsSuccessful();
    }

    public function testPostInvalidUnicorns(): void
    {
        $client = static::createClient();

        $data = [
            'content' => 'X',
            'name'    => 'D',
            'price'   => 100
        ];

        $client->request('POST',
            '/api/unicorns',
            array(),
            array(),
            array('CONTENT_TYPE' => 'application/json'),
            json_encode($data)
        );
        $this->assertEquals(400, $client->getResponse()->getStatusCode());
    }

    public function testUpdateUnicorns(): void
    {
        $client = static::createClient();

        $data = [
            'content' => 'New content made by testUpdateUnicorns method',
            'name'    => 'New name generated by tests',
            'price'   => 4500
        ];
        $client->request('PUT',
            '/api/unicorns/2',
            array(),
            array(),
            array('CONTENT_TYPE' => 'application/json'),
            json_encode($data)
        );

        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        $this->assertResponseIsSuccessful();
    }

    public function testUpdateInexistentUnicorns(): void
    {
        $client = static::createClient();

        $data = [
            'content' => 'An updated content by functional tests',
        ];
        $client->request('PATCH',
            '/api/unicorns/99999',
            array(),
            array(),
            array('CONTENT_TYPE' => 'application/json'),
            json_encode($data)
        );

        $this->assertEquals(404, $client->getResponse()->getStatusCode());
    }

    public function testUpdateInvalidUnicorns(): void
    {
        $client = static::createClient();

        $data = [
            'content' => 'Y',
            'name'    => 'Z'
        ];
        $client->request('PUT',
            '/api/unicorns/3',
            array(),
            array(),
            array('CONTENT_TYPE' => 'application/json'),
            json_encode($data)
        );

        $this->assertEquals(400, $client->getResponse()->getStatusCode());
    }

    public function testDeleteUnicorns(): void
    {
        $client = static::createClient();
        $client->request('DELETE','/api/unicorns/7');

        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        $this->assertResponseIsSuccessful();
    }

    public function testDeleteInexistentUnicorns(): void
    {
        $client = static::createClient();
        $client->request('DELETE','/api/unicorns/99999');

        $this->assertEquals(404, $client->getResponse()->getStatusCode());
    }
}
